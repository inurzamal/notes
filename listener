import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.stereotype.Component;

@Component
public class JobCompletionNotificationListener extends JobExecutionListenerSupport {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobCompletionNotificationListener.class);

    @Override
    public void afterJob(JobExecution jobExecution) {
        if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
            LOGGER.info("Job completed successfully: {}", jobExecution.getJobInstance().getJobName());
            // Perform cleanup or additional tasks
            // You can also trigger application exit with specific exit code here
        } else if (jobExecution.getStatus() == BatchStatus.FAILED) {
            LOGGER.error("Job failed: {}", jobExecution.getJobInstance().getJobName());
            // Handle job failure
        }
    }
}




@Autowired
private ConfigurableApplicationContext context;

@Override
public void afterJob(JobExecution jobExecution) {
    if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
        LOGGER.info("Job completed successfully: {}", jobExecution.getJobInstance().getJobName());
        // Perform cleanup or additional tasks
        SpringApplication.exit(context, () -> 0); // Exit with success status
    } else if (jobExecution.getStatus() == BatchStatus.FAILED) {
        LOGGER.error("Job failed: {}", jobExecution.getJobInstance().getJobName());
        // Handle job failure
        SpringApplication.exit(context, () -> 1); // Exit with failure status
    }
}


JUNIT
---------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import static org.mockito.Mockito.*;

public class JobCompletionNotificationListenerTest {

    @Mock
    private Logger mockLogger;

    @Mock
    private ConfigurableApplicationContext mockContext;

    @InjectMocks
    private JobCompletionNotificationListener listener;

    @Test
    public void testAfterJobCompleted() {
        JobExecution jobExecution = new JobExecution(1L);
        jobExecution.setStatus(BatchStatus.COMPLETED);

        // Mock the logger behavior
        MockitoAnnotations.initMocks(this); // Initialize mocks
        when(mockLogger.isInfoEnabled()).thenReturn(true);

        listener.afterJob(jobExecution);

        // Verify that the logger was called with the correct message
        verify(mockLogger).info("Job completed successfully: {}", jobExecution.getJobInstance().getJobName());

        // Optionally, you can verify some behavior with the context/mockSpringApplication
        // For static methods like SpringApplication.exit(), you may need to refactor the code to be more testable
    }

    @Test
    public void testAfterJobFailed() {
        JobExecution jobExecution = new JobExecution(1L);
        jobExecution.setStatus(BatchStatus.FAILED);

        // Mock the logger behavior
        MockitoAnnotations.initMocks(this); // Initialize mocks
        when(mockLogger.isErrorEnabled()).thenReturn(true);

        listener.afterJob(jobExecution);

        // Verify that the logger was called with the correct message
        verify(mockLogger).error("Job failed: {}", jobExecution.getJobInstance().getJobName());

        // Optionally, you can verify some behavior with the context/mockSpringApplication
        // For static methods like SpringApplication.exit(), you may need to refactor the code to be more testable
    }
}
