import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestBodyUriSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.Instant;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class OAuthenticationServiceTest {

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient webClient;

    @Mock
    private RequestBodyUriSpec requestHeadersUriSpec;

    @Mock
    private ResponseSpec responseSpec;

    @InjectMocks
    private OAuthenticationService oAuthenticationService;

    @Before
    public void setUp() {
        when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.build()).thenReturn(webClient);
        when(webClient.post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.headers(any())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
    }

    @Test
    public void testGetOathAccessToken_CachedToken() {
        // Set cached token and expiration time
        oAuthenticationService.cachedToken = "cachedToken";
        oAuthenticationService.tokenExpirationTime = Instant.now().plus(Duration.ofMinutes(5));

        // Call the method
        Mono<String> tokenMono = oAuthenticationService.getOathAccessToken();

        // Verify that cached token is returned without making webClient.post() call
        tokenMono.subscribe(token -> assertEquals("cachedToken", token));
        verify(webClient, never()).post();
    }

    @Test
    public void testGetOathAccessToken_NewToken() {
        // Prepare response map with new token and expiration
        Map<String, String> responseMap = new HashMap<>();
        responseMap.put("access_token", "newAccessToken");
        responseMap.put("expires_in", "300");

        // Mock response bodyToMono
        when(responseSpec.bodyToMono(any())).thenReturn(Mono.just(responseMap));

        // Call the method
        Mono<String> tokenMono = oAuthenticationService.getOathAccessToken();

        // Verify new access token is returned
        tokenMono.subscribe(token -> assertEquals("newAccessToken", token));

        // Verify webClient.post() call with correct headers
        ArgumentCaptor<HttpHeaders> headersCaptor = ArgumentCaptor.forClass(HttpHeaders.class);
        verify(requestHeadersUriSpec).headers(headersCaptor.capture());

        HttpHeaders headers = headersCaptor.getValue();
        String expectedAuthHeader = "Basic " + Base64.getEncoder().encodeToString("authString".getBytes(StandardCharsets.UTF_8));
        assertEquals(expectedAuthHeader, headers.getFirst("Authorization"));
        assertEquals("application/x-www-form-urlencoded", headers.getFirst("Content-Type"));
    }

    @Test
    public void testGetOathAccessToken_ErrorResponse() {
        // Mock response bodyToMono to simulate error response
        when(responseSpec.bodyToMono(any())).thenReturn(Mono.error(
                new WebClientResponseException("Error", HttpStatus.INTERNAL_SERVER_ERROR.value(),
                        "Internal Server Error", null, null, null)));

        // Call the method
        Mono<String> tokenMono = oAuthenticationService.getOathAccessToken();

        // Verify error is propagated correctly
        tokenMono
                .doOnError(WebClientResponseException.class, e -> {
                    assertEquals("Error response from auth service: 500 Internal Server Error", e.getMessage());
                })
                .subscribe();
    }
}
