import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.StringWriter;

@ExtendWith(MockitoExtension.class)
class OclaSoapClientServiceTest {

    @InjectMocks
    private OclaSoapClientService oclaSoapClientService;

    @Mock
    private HttpsConnector httpsConnector;
    @Mock
    private OclaCommunicationUtility oclaCommunicationUtility;

    @Test
    void senddataToOclaTest() throws JAXBException {
        // Create a sample request
        AddDocumentCommunicationType request = createAddDocumentCommunicationType();

        // Create a sample response object
        AddDocumentCommunicationResponseType response = createAddDocumentCommunicationResponseType();

        // Convert the response object to XML
        String sampleResponseXml = convertResponseToXml(response);

        // Mock the behavior of httpsConnector
        when(httpsConnector.sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com")))
                .thenReturn(sampleResponseXml);

        // Mock the behavior of oclaCommunicationUtility
        when(oclaCommunicationUtility.saveOCLAResponse(any(AddDocumentCommunicationResponseType.class)))
                .thenReturn("documentId123"); // Provide a sample document ID

        // Call the method under test
        String result = oclaSoapClientService.senddataToOcla(request);

        // Verify that the httpsConnector was called with the expected arguments
        verify(httpsConnector).sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com"));

        // Verify that oclaCommunicationUtility.saveOCLAResponse was called with a response
        verify(oclaCommunicationUtility).saveOCLAResponse(any(AddDocumentCommunicationResponseType.class));

        // Verify that the result is not null
        assertNotNull(result);

        // Verify that the result matches the expected document ID
        assertEquals("documentId123", result);
    }

    public static AddDocumentCommunicationType createAddDocumentCommunicationType() {
        // Implement your method to create a sample request
    }

    public static AddDocumentCommunicationResponseType createAddDocumentCommunicationResponseType() {
        // Implement your method to create a sample response
    }

    public String convertResponseToXml(AddDocumentCommunicationResponseType response) throws JAXBException {
        JAXBContext context = JAXBContext.newInstance(AddDocumentCommunicationResponseType.class);
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

        StringWriter writer = new StringWriter();
        marshaller.marshal(response, writer);
        return writer.toString();
    }
}
