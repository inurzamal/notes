import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OclaSoapClientServiceTest {

    @InjectMocks
    private OclaSoapClientService oclaSoapClientService;

    @Mock
    private HttpsConnector httpsConnector;
    @Mock
    private OclaCommunicationUtility oclaCommunicationUtility;

    @Test
    void senddataToOclaTest() {
        // Create a sample request
        AddDocumentCommunicationType request = new AddDocumentCommunicationType();
        request.setSomeProperty("sampleValue");

        // Create a sample response XML
        String sampleResponseXml = "<AddDocumentCommunicationResponseType>...</AddDocumentCommunicationResponseType>";

       // Convert the response object to XML
        String sampleResponseXml = convertResponseToXml(response);

        // Mock the behavior of httpsConnector
        when(httpsConnector.sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com")))
                .thenReturn(sampleResponseXml);

        // Mock the behavior of oclaCommunicationUtility
        when(oclaCommunicationUtility.saveOCLAResponse(any(AddDocumentCommunicationResponseType.class)))
                .thenReturn("documentId123"); // Provide a sample document ID

        // Call the method under test
        String result = oclaSoapClientService.senddataToOcla(request);

        // Verify that the httpsConnector was called with the expected arguments
        verify(httpsConnector).sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com"));

        // Verify that oclaCommunicationUtility.saveOCLAResponse was called with a response
        verify(oclaCommunicationUtility).saveOCLAResponse(any(AddDocumentCommunicationResponseType.class));

        // Verify that the result is null (as indicated in your original method)
        assertNull(result);
    }
    @Test
    void senddataToOclaTestWhenException() {
        // Create a sample request
        AddDocumentCommunicationType request = new AddDocumentCommunicationType();
        request.setSomeProperty("sampleValue");

        // Mock the behavior of httpsConnector to throw an exception
        when(httpsConnector.sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com")))
                .thenThrow(new RuntimeException("Simulated exception"));

        // Mock the behavior of oclaCommunicationUtility
        when(oclaCommunicationUtility.saveOCLAResponse(any(AddDocumentCommunicationResponseType.class)))
                .thenReturn("documentId123"); // Provide a sample document ID

        // Ensure the method throws an exception
        assertThrows(RuntimeException.class, () -> {
            oclaSoapClientService.senddataToOcla(request);
        });

        // Verify that the httpsConnector was called with the expected arguments
        verify(httpsConnector).sendHttpsForStringResponse(eq("https://abco.com/9015/xyz"), anyString(), eq("http://service.xyz.com"));

        // Verify that oclaCommunicationUtility.saveOCLAResponse was not called in case of an exception
        verify(oclaCommunicationUtility, never()).saveOCLAResponse(any(AddDocumentCommunicationResponseType.class));
    }

    public String convertResponseToXml(AddDocumentCommunicationResponseType response) throws JAXBException {
        JAXBContext context = JAXBContext.newInstance(AddDocumentCommunicationResponseType.class);
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
    
        StringWriter writer = new StringWriter();
        marshaller.marshal(response, writer);
        return writer.toString();
    }
}
