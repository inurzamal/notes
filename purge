package com.yourpackage.batch.job;

import com.yourpackage.batch.listener.JobCompletionNotificationListener;
import com.yourpackage.entity.EscrowAnalysis;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.data.RepositoryItemReader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.persistence.EntityManagerFactory;

@Configuration
public class PurgeEscrowAnalysisJob {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private JobCompletionNotificationListener jobCompletionNotificationListener;

    @Autowired
    private EscrowAnalysisRepository escrowAnalysisRepository;

    @Autowired
    private EntityManagerFactory entityManagerFactory;

    @Bean
    public RepositoryItemReader<EscrowAnalysis> purgeReader() {
        RepositoryItemReader<EscrowAnalysis> reader = new RepositoryItemReader<>();
        reader.setRepository(escrowAnalysisRepository);
        reader.setMethodName("findPurgeData"); // Implement this method in the repository
        reader.setPageSize(100); // Adjust the page size as needed
        return reader;
    }

    @Bean
    public ItemProcessor<EscrowAnalysis, EscrowAnalysis> purgeProcessor() {
        // Implement your ItemProcessor logic
        return item -> item; // Placeholder, replace with actual logic
    }

    @Bean
    public ItemWriter<EscrowAnalysis> purgeWriter() {
        // Implement your ItemWriter logic
        return items -> {
            // Placeholder, replace with actual logic
            for (EscrowAnalysis item : items) {
                // Process each item
            }
        };
    }

    @Bean
    public Step purgeDataStep(RepositoryItemReader<EscrowAnalysis> purgeReader,
                              ItemProcessor<EscrowAnalysis, EscrowAnalysis> purgeProcessor,
                              ItemWriter<EscrowAnalysis> purgeWriter) {
        return stepBuilderFactory.get("purgeDataStep")
                .<EscrowAnalysis, EscrowAnalysis>chunk(100)
                .reader(purgeReader)
                .processor(purgeProcessor)
                .writer(purgeWriter)
                .build();
    }

    @Bean
    public Job purgeEscrowAnalysisJob(Step purgeDataStep) {
        return jobBuilderFactory.get("purgeEscrowAnalysisJob")
                .incrementer(new RunIdIncrementer())
                .listener(jobCompletionNotificationListener)
                .flow(purgeDataStep)
                .end()
                .build();
    }
}
